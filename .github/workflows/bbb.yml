name: 'bbb' 
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  power_on:
    runs-on: [self-hosted, linux, x64, builder]
    steps:
      - uses: actions/checkout@v4

      - name: power on runner # channel 2 is dut runner 3, force power cycle
        run: >
          ./automation/power.sh off 2 &&
          sleep 3 &&
          ./automation/power.sh on 2

  test_image_bbb:
    runs-on: [self-hosted, linux, x64, dut, beagleboneblack]
    needs: power_on
    continue-on-error: true
    outputs:
      result: ${{ steps.prepare_result.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - name: create mountpoint
        run: mkdir data

      - name: prepare grub image
        run: >
          ./helpers/control_rig.sh power_off &&
          ./helpers/control_rig.sh sdmux_host &&
          ./helpers/control_rig.sh flash /mnt/mender_gha/TheYoctoJester/meta-mender-community/scarthgap/build_validation/latest/beaglebone/images/core-image-minimal-beaglebone-yocto-grub.sdimg
    
      - name: test grub image
        run: ./helpers/simple_run.sh

      - name: collect artifacts
        run: ./helpers/gather_validation_artifacts.sh

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: bbb.tar.bz2
          path: output.tar.bz2
      
      - name: show log
        run: cat output/validation.log

      - name: prepare_result
        run: >
          if grep -q "BOOTLOADER VALIDATION: SUCCESS" output/validation.log; then \
            echo "result=success" >> $GITHUB_OUTPUT
          elif grep "BOOTLOADER VALIDATION: FAILURE" output/validation.log; then \
            echo "result=failure" >> $GITHUB_OUTPUT
          else
            echo "result=failure - no evaluation" >> $GITHUB_OUTPUT
          fi

  test_image_bbb-uboot:
    runs-on: [self-hosted, linux, x64, dut, beagleboneblack]
    needs: power_on
    continue-on-error: true
    outputs:
      result: ${{ steps.prepare_result.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - name: create mountpoint
        run: mkdir data

      - name: prepare uboot image
        run: >
          ./helpers/control_rig.sh power_off &&
          ./helpers/control_rig.sh sdmux_host &&
          ./helpers/control_rig.sh flash /mnt/mender_gha/TheYoctoJester/meta-mender-community/scarthgap/build_validation/latest/beaglebone-uboot/images/core-image-minimal-beaglebone-yocto.sdimg
    
      - name: test uboot image
        run: ./helpers/simple_run.sh

      - name: collect artifacts
        run: ./helpers/gather_validation_artifacts.sh

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: bbb-ubootuboot.tar.bz2
          path: output.tar.bz2
      
      - name: show log
        run: cat output/validation.log

      - name: prepare_result
        run: >
          if grep -q "BOOTLOADER VALIDATION: SUCCESS" output/validation.log; then \
            echo "result=success" >> $GITHUB_OUTPUT
          elif grep "BOOTLOADER VALIDATION: FAILURE" output/validation.log; then \
            echo "result=failure" >> $GITHUB_OUTPUT
          else
            echo "result=failure - no evaluation" >> $GITHUB_OUTPUT
          fi

  shutdown:
    runs-on: [self-hosted, linux, x64, dut, beagleboneblack]
    needs: [test_image_bbb, test_image_bbb-uboot]
    steps:
      - name: shutdown runner
        run: sudo shutdown -h +2

  power_off:
    runs-on: [self-hosted, linux, x64, builder]
    needs: [shutdown]
    steps:
      - uses: actions/checkout@v4

      - name: wait a bit for runner to shut down
        run: sleep 300
      - name: power off runner
        run: ./automation/power.sh off 2

  # this runs last!
  evaluate:
    needs: [test_image_bbb, test_image_bbb-uboot, power_off]
    runs-on: ubuntu-latest
    steps:
      - name: collect artifacts
        env:
          RESULT_1: ${{ needs.test_image_bbb.outputs.result }}
          RESULT_2: ${{ needs.test_image_bbb-uboot.outputs.result }}
        run: >
          echo "RESULT_1 (test_image_bbb) = $RESULT_1";
          echo "RESULT_2 (test_image_bbb-uboot)= $RESULT_2";
          if [ "$RESULT_1" != "success" ] || [ "$RESULT_2" != "success" ]; then
            exit 1
          fi